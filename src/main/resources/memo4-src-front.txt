드디어 JWT 마지막 글이다.
처음 에서는 JWT 가 무엇이고 왜 쓰는지 이해했다.
두 번째 글에서는 그 이해를 가지고 기본 메소드를 알아봤다.
지난 글에서는 백엔드에서 어떻게 구현해야 하는지 살펴봤다.
이번 글에서는 프론트에서 어떻게 구현해야 하는 알아보자.


로그인 버튼을 클릭하면 onclickLogin() 함수를 실행한다.
사용자가 화면에 입력한 아이디와 패스워드를 가지고 axios 를 호출한다.
인증에 실패한다면 아이디와 비밀번호가 맞지 않다는 alert 을 띄우고 끝낸다.
인증에 성공한다면 로그인 정보를 저장한다.
로그인 정보에는 access 토큰이 포함돼 있다.


먼저 axios 요청을 보낼 때 header 에 access 토큰이 default 로 들어가게끔 설정한다.
화면도 다르고 기능도 다른데 요청마다 access 토큰을 일일이 넣어주기란 무리가 있다.
따라서 axios 자체에 default 로 넣어두면 모든 요청에 저절로 access 토큰이 들어간다.
그러면 서버 쪽에서는 요청에 들어 있던 토큰을 header 로부터 꺼내와서 로그인 정보를 확인할 것이다.
모든 요청에 access 토큰을 넣는다고 해서 모든 요청에 로그인 체크를 하지는 않는다.
서버 쪽에서는 로그인 정보가 필요하면 access 토큰을 꺼내 쓸 것이고, 아니면 그냥 통과시키면 그만이다.
지난 글에서 서버 쪽 소스를 살펴보면서 filter 기능을 다루었다.
로그인이 필요한 요청인지 아닌지 판단하는 기능이 이 filter 기능이다.


axios 요청을 보낼 때 header 에 access 토큰을 default 로 포함하도록 설정하는 코드는 아래이다.
// axios 설정에다가 header 에 default 로 accessToken 이 들어가게끔 설정
this.axios.defaults.headers.common["Authorization"] = `Bearer ${response.data.accessToken}`;


이론상으로는 여기까지만 구현해야 맞다.
로그인한 사용자 정보는 이미 토큰에 payload 로 인코딩돼 있다.
로그인한 사용자의 id 같은 정보가 필요하다면 토큰으로부터 추출해서 사용해야 맞다.
로그인 정보를 굳이 브라우저나 앱 store 저장소에 올려둘 필요가 없다.

그런데 이렇게만 구현하면 문제가 있었다.
새로고침을 하면 정보가 사라지는 문제다.
새로고침하면 React 나 Vue 같은 프론트 스크립트 app 이 리로드된다.
this.axios 에 저장해뒀는데 this 가 새로 만들어지게 된다.
그러니 axios 설정도 모두 초기화돼 버린다.
로그인했을 때 header 에 저장했 뒀던 토큰이 사라진다.

이것을 해결하기 위해서 localStorage 를 이용했다.
로그인에 성공하면 로그인 정보를 axios 에도 설정하고 localStorage 에도 넣어두기로 했다.
그리고 app 이 리로드될 때 lifecycle 을 catch 해서 localStorage 에 토큰이 있는지 확인한다.
토큰이 있다면 로그인 성공했을 때와 똑같이 axios 에 넣어준다.

// 로그인 정보를 브라우저 localStorage 에 저장
localStorage.setItem("loginInfo", JSON.stringify(response.data));

componentWillMount() {
    // 앱 리로드 시에 localStorage 에 token 정보 있다면 axios header 에 default 값으로 넣어주기
    const loginInfo = JSON.parse(localStorage.getItem("loginInfo"));
    if ( loginInfo != null && loginInfo.accessToken != null && loginInfo.accessToken.split(".").length == 3) {
      this.axios.defaults.headers.common["Authorization"] = `Bearer ${loginInfo.accessToken}`;
    }
},

아래는 로그인 버튼 클릭 시 작동하는 함수 구현이다.

onclickLogin: function () {
      let vm = this;
      this.axios(
        {
          url: "/api/auth/login",
          data: vm.param,
          method: "post",
        },
        {
          headers: { "Content-Type": "application/json" },
        }
      )
        .then((response) => {
          if (!response.data.result) {
            // 사용자 인증 실패했을 경우
            alert("아이디와 비밀번호를 확인해 주세요");
            return;
          }

          // axios 설정에다가 header 에 default 로 accessToken 이 들어가게끔 설정
          this.axios.defaults.headers.common[
            "Authorization"
          ] = `Bearer ${response.data.accessToken}`;

          // 로그인 정보를 브라우저 localStorage 에 저장
          // localStorage 에는 객체 그대로 저장하면 object 이런 식으로 나와서 JSON.stringify(data); 해서 저장하고 반대로 꺼낼 때도 JSON.parse(data); 해서 꺼내 써야 함.
          localStorage.setItem("loginInfo", JSON.stringify(response.data));

          // 로그인 정보를 store 에도 저장
          this.$store.commit("changeLoginInfo", response.data);

          //
          this.$router.push({ name: "Dashboard" }); // router 정보는 ./router/index.js 에 있음
          // this.$router.push("/");    // url 로 직접 보낼 수도 있음
        })
        .catch((err) => {
          console.log(err);
        });
    },



로그인에 성공하면 axios 요청에 access 토큰을 header 안에 넣어서 보내도록 설정했다.
그러면 서버 쪽은 로그인을 해야만 접근할 수 있는 요청인지 아니면 그냥 접근해도 되는 요청인지 filter 에서 판단하고,
만약 로그인을 해야만 접근할 수 있는 요청이라면 header 에 포함돼 있던 access 토큰을 꺼내와서 확인해 본다.
그런데 만약 access 토큰이 없거나 유효하지 않다면?
403 에러를 보내든, flag 를 보내든, msg 를 보내든 할 텐데, 그걸 화면단에서는 어떻게 처리해야 할까?
모든 요청마다 response 에 예외 처리를 반복해서 넣어줘야 할까?
매우 수고스럽고 유지 보수도 어려운 방법이다.

axios 응답에 interceptor 를 설정하면 편하다.
모든 axios 요청에 header 정보를 설정할 수 있었던 것처럼, response 에 interceptor 를 설정할 수 있다.
response 에 interceptor 를 설정하면 응답이 받아오기 전에 작업을 수행한다.
응답이 서버로부터 넘어올 때 interceptor 를 먼저 실행해 보고 그 다음에 원래 호출했던 위치로 던져준다.
403 에러를 되돌려 받았을 경우 로그인하라는 메세지를 띄우고 로그인 페이지로 이동하도록 interceptor 를 설정하자.
설정하는 방법은 아래 형태로 함수를 호출하면 된다.
this.axios.interceptors.response.use(funcSuccess, funcFail);


// 응답 인터셉터 추가하기
const vm = this;
this.axios.interceptors.response.use(
  function (response) {
    // 2xx 범위에 있는 상태 코드는 이 함수를 트리거 합니다.
    return response;
  },
  function (error) {
    // 2xx 외의 범위에 있는 상태 코드는 이 함수를 트리거 합니다.
    if (error.response.status == 403) {
      // 권한 없음
      alert("로그인 후 이용해주세요");
      vm.$router.push({ name: "signin" });
    }
    return Promise.reject(error);
  }
);


request 에 interceptor 를 설정하는 방법도 있다.
axios 요청을 서버로 내보내기 전에 interceptor 를 수행한다.
그러면 서버까지 다녀오지 않고서도 로그인해야 하는 페이지를 어느 정도 걸러줄 수 있다.
응답에 interceptor 를 걸어두면 먼저 요청을 서버로 보내고 나서 그 결과 로그인을 해야 하는지 아닌지 확인해야 한다.
그러면 일단 요청을 서버까지 보내고 나서 돌아올 때까지 기다려야 한다.
response 에만 interceptor 를 걸면 무조건 서버까지 다녀와야 하지만
request 에 interceptor 를 걸면 서버까지 다녀오지 않아도 판단할 수 있다.
요청에 interceptor 를 설정하는 방법도 비슷하다.
this.axios.interceptors.request.use(funcSuccess, funcFail);

// 요청 인터셉터 추가하기
this.axios.interceptors.request.use(
  function (config) {
    const auth = config.headers.get("Authorization").startsWith("Bearer ");
    // 요청이 전달되기 전에 작업 수행
    if (auth != null && auth.startsWith("Bearer ")) {
      // header 에 access 토큰이 정상적으로 들어 있는 요청일 경우 그대로 원래 요청 실행
      return config;
    }
    // 로그인 정보가 없을 경우 로그인 하도록 알림 후 페이지 이동
    alert("로그인 후 이용해주세요");
    vm.$router.push({ name: "signin" });
  },
  function (error) {
    // 요청 오류가 있는 작업 수행
    return Promise.reject(error);
  }
);


사실 이 정도만 해도 충분하다.
서버 쪽에서 filter 를 세우고, axios 에서 header 에 토큰을 default 값으로 포함시키고,
axios 에서 모든 요청과 응답에 interceptor 를 걸었다.
이 정도만 해도 웬만큼은 걸러내겠지만 조금 더 안전하게 하고 싶어서 router 에까지 로그인 체크를 걸어주었다.
vue 에서는 페이지를 이동할 때 이동 전,후로 특정 작업을 수행하도록 interceptor 를 걸어줄 수 있다.
router 네비게이션 비포 가드, 애프터 가드라는 기능을 이용하면 된다.
이 기능을 이용해서 페이지를 이동할 때에도 로그인 상태를 확인하도록 만들었다.

// 로그인 없이도 접근할 수 있는 router path 목록
const allowPathList = ["/signin", "/signup"];
// router 에 네비게이션 비포 가드 설정
this.$router.beforeEach((to, from, next) => {
  const loginInfo = JSON.parse(localStorage.getItem("loginInfo"));
  if (allowPathList.includes(to.path) || (loginInfo != null && loginInfo.accessToken != null && loginInfo.accessToken.split(".").length == 3)) {
    next();
  } else {
    alert("로그인 후 이용해주세요");
    next({ name: "Signin" });
  }
});



//////////////////////////////////////////////////////////

//
Vue 를 사용할 때 여러 화면에서 공통적으로 쓰는 함수는 global 로 선언할 수 있다.
예를 들어서 문자열 null 체크 함수나 숫자에 천 단위 콤마(,) 를 찍어주는 함수 등이다.
이런 기능은 여러 화면에서 계속 불러다 써야 한다.
이럴 때 함수를 global 로 선언하고 this 로 호출할 수 있다.

우선 js 파일 하나를 만든다.
아래에서는 globalFunctions.js 로 만들었다.
그리고 그 파일 안에 global 로 선언할 함수를 작성한다.
마지막에 export 해주면서 install 함수에서 globalProperties 로 넣어준다.


import axios from "axios";

const globalFunctions = {
    getLoginInfo() {
        return JSON.parse(localStorage.getItem("loginInfo"));
    },
    withComma(num) {
        num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    },
};

export default {
    install(Vue) {
        Vue.config.globalProperties.$globalFunctions = globalFunctions;
        Vue.config.globalProperties.axios = axios;
    },
};


이렇게 만들어 둔 js 파일을 main.js 파일에서 import 한다.
밑에서처럼 app.use() 에 파라미터로 넣어주면 끝난다.


import { createApp } from "vue";
import App from "./App.vue";
import store from "./store";
import router from "./router";
import globalFunctions from "./js/globalFunctions.js";

const app = createApp(App);
app.use(store);
app.use(router);
app.use(globalFunctions);
app.mount("#app");



이제 다른 화면에서는 아래처럼 바로 가져다 쓸 수 있다.
const loginInfo = this.$globalFunctions.getLoginInfo();
const priceWithComma = this.$globalFunctions.withComma(38900);
