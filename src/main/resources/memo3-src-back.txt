

//
첫 글에서 JWT 가 무엇이고 어떤 목적으로 쓰는지 알아봤다.
다음 글에서는 그 이해를 바탕으로 기본적인 조작법을 익혔다.
이번 글에서는 실제 구현한 코드를 살펴보자.


토큰을 조작할 때는 몇 가지 고정된 값이 있다.
key 값이가 만료되기까지 시간, 토큰 발급자 등이 그렇다.
이런 값들은 소스코드 안에 하드코딩으로 때려박으면 좋지 않다.
수정 보완할 때 여기 저기 찾아서 고쳐야 하고
보안상도 좋지 않다.
따라서 이런 고정 값들은 설정 파일에 두고 생성자로 받아다 쓰도록 했다.

원래는 refresh 토큰 기능이 있어야 하지만 아래에서는 없다.
일단 토이 프로젝트 완성 기간이 촉박하기도 했고,
일단 가장 단순하게 access 토큰을 구현해 보고
그 위에 refresh 토큰까지 덧입혀보자는 생각이다.
refresh 토큰은 나중에 기회가 되면 구현해 보려는
생각으로 refresh 토큰은 구현하지 않았다.

밑에서 구현한 JwtTokenProvider 클래스를 이루고 있는 메소드는 총 3가지 종류다.
하나는 토큰을 발급하는 메소드,
또 하나는 토큰을 검증하는 메소드,
마지막 하나는 토큰으로부터 정보를 꺼내오는 메소드다.

첫째로 토큰을 발급하는 메소드는 createToken() 이다.
누구에게 발급하는지를 파라미터로 받고 토큰을 되돌려준다.
토큰을 만드는 데 쓰는 나머지 값들은 고정값을 사용한다.

둘째로 토큰을 검증하는 메소드는 isValidToken() 이다.
토큰을 파라미터로 받으면 그 토큰이 유효한지 아닌지 여부를 되돌려준다.
검즐할 때는 parser() 를 사용하고 고정값인 key 를 넣어줘야 한다.

마지막으로 토큰으로부터 정보를 꺼내오는 메소드는 extract*() 이다.
extractSubject() 나 extractIssuer() 등은 기본으로 제공해주는 값들을 꺼내올 때 쓴다.
extractClaim() 은 우리가 마음대로 넣어 둔 key-val 을 꺼내올 때 쓴다.



import io.jsonwebtoken.Claims;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.JwtException;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import javax.crypto.SecretKey;
import java.util.Date;

@Component
public class JwtTokenProvider {

    private final SecretKey key;

    private final long expireTime;

    public JwtTokenProvider(@Value("${jwt.token.secret-key}") final String secretKey,
                            @Value("${jwt.token.expire-time}") final long expireTime ) {
        this.key = Keys.hmacShaKeyFor(Decoders.BASE64.decode(secretKey));

        this.expireTime = expireTime;
    }



    public String createToken(final String subject) {
        Date nowDate = new Date();
        Date expireDate = new Date(nowDate.getTime() + expireTime);
        return Jwts.builder()
                .subject(subject)
                .issuedAt(nowDate)
                .expiration(expireDate)
                .signWith(key)
                .compact();
    }


    public boolean isValidToken(final String token) {
        try {
            Jwts.parser()
                    .verifyWith(key)
                    .build()
                    .parseSignedClaims(token);
            return true;
        } catch (ExpiredJwtException e ) {
            // 만료된 토큰
            return false;
        } catch (JwtException e) {
            e.printStackTrace();
            throw new IllegalStateException("올바른 토큰이 아닙니다");
        }
    }

    private Claims extractPayload(String token) {
        return Jwts.parser()
                .verifyWith(key)
                .build()
                .parseSignedClaims(token)
                .getPayload();
    }

    public String extractSubject(String token) {
        return this.extractPayload(token).getSubject();
    }

    public String extractIssuer(String token) {
        return this.extractPayload(token).getIssuer();
    }

    public Object extractClaim(String token, String key) {
        return this.extractPayload(token).get(key);
    }

}


이제 필터 기능을 만들어 보자.
왜 필터 기능이 필요한가?
예를 들어 A,B,C,D,E,F,G 라는 기능이 있다.
그런데 로그인을 해야만 접근할 수 있는 기능은 A,B,C,E 이고,
D,F,G 는 로그인이 필요 없다.
그러면 A,B,C,E 메소드에 일일이 들어가서 토큰을 확인해야 할까?
만약에 로그인 기능에 뭔가 수정이 된다면?
일일이 찾아서 고쳐야 할까?
A,B,E 만 수정하고 실수로 C 는 빼먹었다면?
이러한 이유 때문에 필터가 필요하다.
필터는 요청이 들어오면 먼저 살펴보고 거부하거나 통과시킨다.
필터를 적용할지 말지 기준을 패턴으로 만들면 기능마다 일일이 적용하지 않아도 된다.


인터셉터 기능으로도 만들 수 있지만 굳이 필터를 썼다.
둘이 작동하는 시점이 다르기 때문이다.
filter 는 요청이 Dispatcher Servlet 에 도달하는 시점에 작동한다.
interceptor 는 요청이 Dispatcher Servlet 으로부터 controller 에 도달하는 시점에 작동한다.
filter 는 Dispatcher Servlet 단계에서 작동하는 일이고,
interception 는 스프링 컨테이너 단계에서 작동하는 일이다.
경우에 따라서는 요청이 interceptor 를 거치지 않기도 한다.
조금 더 안전한 처리를 위해 filter 를 썼다.


Spring Security 를 굳이 이용하지 않았다.
필터 기능은 Spring Security 를 이용하면 더 간편하게 구현할 수 있다고 한다.
필터들 사이에 우선순위를 정하기도 하고 스프링 컨테이너가 관리하는 빈에도 접근할 수 있다고 한다.
하지만 굳이 Spring Security 를 사용하지 않은 이유는 이전 글에서 말한 이유와 같다.
JWT 를 처음 배우는 입장에서 Spring Security 를 결합한 채로 배우게 되면
어디까지가 Spring Security 기능이고 어디부터 JWT 기능인지 헷갈릴 수 있다.
따라서 걷어낼 수 있는 기능은 최대한 걷어내고 가장 간단한 형태로 배우려고 한다.
가능한 한 JWT 기능에만 집중하고 싶어서 Spring Security 를 사용하지 않았다.


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Enumeration;
import java.util.List;
import java.util.logging.Logger;

@Component
public class JwtAuthFilter extends OncePerRequestFilter {

    private static Logger logger = Logger.getLogger(JwtAuthFilter.class.getSimpleName());

    @Value("${jwt.non-target-get}")
    private List<String> allowListGet;
    @Value("${jwt.non-target-post}")
    private List<String> allowListPost;

    @Autowired
    private JwtTokenProvider jwtProvider;

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
        logger.info("###################################### REQUEST HEADER #################################");
        logger.info(request.getRequestURI());   //>> "/api/auth/test"
        logger.info(String.valueOf(request.getRequestURL())); //>> "http://localhost/api/auth/test "
        logger.info(request.getMethod()); //>> "GET" / "POST" / "UPDATE" / .....
        Enumeration<String> headerNames  = request.getHeaderNames();  //>> header 에 들어 있는 key 들 꺼내기
        logger.info(request.getHeader("Authorization"));  //>> header 에 어떤 key 로 들어 있는 value 받아오기
        String token = null;
        while(headerNames.hasMoreElements()) {
            String key = headerNames.nextElement();
            String val = request.getHeader(key);
            logger.info(key);
            logger.info(val);
            if(val.startsWith("Bearer ")) {
                token = val;
            }

        }
        logger.info("###################################### REQUEST HEADER #################################");

        List<String> targetList = null;     // 로그인 안 해도 되는 페이지 주소 리스트
        String uri = request.getRequestURI();   // 클라이언트가 요청한 주소
        String method = request.getMethod();    // 클라이언트가 요청한 method

        if("GET".equals(method)) {
            // get 요청일 경우
            targetList = this.allowListGet;
        } else if("POST".equals(method)) {
            // post 요청일 경우
            targetList = this.allowListPost;
        }
        if(!(targetList != null && targetList.contains(uri))) {
            // 로그인 해야 하는 페이지인 경우 - 요청한 header 로부터 로큰 꺼내서 로그인 여부 확인
            if(!(token != null && token.startsWith("Bearer ") && jwtProvider.isValidToken(token.substring(7)))) {
                // 유효한 토큰이 아닌 경우
                logger.info("####################################### auth check ###################################");
                logger.info(token);
                response.sendError(403, "로그인 후 이용해주세요");
                return;
            }
        }

        // 로그인 안 해도 접근할 수 있는 페이지일 경우 - 처리를 그대로 controller 에게 위임
        filterChain.doFilter(request, response);
    }


}
